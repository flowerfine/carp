/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.sliew.carp.module.application.vela.api.v1;

import cn.sliew.carp.module.application.vela.api.v1.model.V1EmptyResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1InstallPluginRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListPluginResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ManagedPluginDTO;
import cn.sliew.carp.module.application.vela.api.v1.model.V1PluginDTO;
import cn.sliew.carp.module.application.vela.api.v1.model.V1PluginEnableRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-08-01T20:13:23.593+08:00")

@Validated
@Api(value = "Plugin", description = "the Plugin API")
@RequestMapping(value = "")
public interface PluginApi {

    Logger log = LoggerFactory.getLogger(PluginApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Detail an installed plugin", nickname = "detailPlugin", notes = "", response = V1ManagedPluginDTO.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ManagedPluginDTO.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins/{pluginId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ManagedPluginDTO> detailPlugin(@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <authType>aeiou</authType>  <backend>true</backend>  <backendType>aeiou</backendType>  <baseURL>aeiou</baseURL>  <category>aeiou</category>  <class>aeiou</class>  <defaultNavURL>aeiou</defaultNavURL>  <enabled>true</enabled>  <id>aeiou</id>  <jsonSetting></jsonSetting>  <module>aeiou</module>  <name>aeiou</name>  <proxy>true</proxy>  <secureJsonFields></secureJsonFields>  <subType>aeiou</subType>  <type>aeiou</type></null>", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Detail an installed plugin", nickname = "detailPlugin_0", notes = "", response = V1PluginDTO.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1PluginDTO.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/plugins/{pluginId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1PluginDTO> detailPlugin_0(@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1PluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <baseURL>aeiou</baseURL>  <category>aeiou</category>  <defaultNavURL>aeiou</defaultNavURL>  <id>aeiou</id>  <module>aeiou</module>  <name>aeiou</name>  <subType>aeiou</subType>  <type>aeiou</type></null>", V1PluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Disable an installed plugin", nickname = "disablePlugin", notes = "", response = V1ManagedPluginDTO.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ManagedPluginDTO.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins/{pluginId}/disable",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    default ResponseEntity<V1ManagedPluginDTO> disablePlugin(@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <authType>aeiou</authType>  <backend>true</backend>  <backendType>aeiou</backendType>  <baseURL>aeiou</baseURL>  <category>aeiou</category>  <class>aeiou</class>  <defaultNavURL>aeiou</defaultNavURL>  <enabled>true</enabled>  <id>aeiou</id>  <jsonSetting></jsonSetting>  <module>aeiou</module>  <name>aeiou</name>  <proxy>true</proxy>  <secureJsonFields></secureJsonFields>  <subType>aeiou</subType>  <type>aeiou</type></null>", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Enable an installed plugin", nickname = "enablePlugin", notes = "", response = V1ManagedPluginDTO.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ManagedPluginDTO.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins/{pluginId}/enable",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1ManagedPluginDTO> enablePlugin(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1PluginEnableRequest body,@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <authType>aeiou</authType>  <backend>true</backend>  <backendType>aeiou</backendType>  <baseURL>aeiou</baseURL>  <category>aeiou</category>  <class>aeiou</class>  <defaultNavURL>aeiou</defaultNavURL>  <enabled>true</enabled>  <id>aeiou</id>  <jsonSetting></jsonSetting>  <module>aeiou</module>  <name>aeiou</name>  <proxy>true</proxy>  <secureJsonFields></secureJsonFields>  <subType>aeiou</subType>  <type>aeiou</type></null>", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Install one specific plugin", nickname = "installPlugin", notes = "", response = V1ManagedPluginDTO.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ManagedPluginDTO.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins/{pluginId}/install",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1ManagedPluginDTO> installPlugin(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1InstallPluginRequest body,@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <authType>aeiou</authType>  <backend>true</backend>  <backendType>aeiou</backendType>  <baseURL>aeiou</baseURL>  <category>aeiou</category>  <class>aeiou</class>  <defaultNavURL>aeiou</defaultNavURL>  <enabled>true</enabled>  <id>aeiou</id>  <jsonSetting></jsonSetting>  <module>aeiou</module>  <name>aeiou</name>  <proxy>true</proxy>  <secureJsonFields></secureJsonFields>  <subType>aeiou</subType>  <type>aeiou</type></null>", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List the enabled plugins", nickname = "listEnabledPlugins", notes = "", response = V1ListPluginResponse.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListPluginResponse.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/plugins",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListPluginResponse> listEnabledPlugins() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListPluginResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListPluginResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List the installed plugins", nickname = "listInstalledPlugins", notes = "", response = V1ListPluginResponse.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListPluginResponse.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListPluginResponse> listInstalledPlugins() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListPluginResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListPluginResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Set an installed plugin", nickname = "pluginSetting", notes = "", response = V1ManagedPluginDTO.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ManagedPluginDTO.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins/{pluginId}/setting",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    default ResponseEntity<V1ManagedPluginDTO> pluginSetting(@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <authType>aeiou</authType>  <backend>true</backend>  <backendType>aeiou</backendType>  <baseURL>aeiou</baseURL>  <category>aeiou</category>  <class>aeiou</class>  <defaultNavURL>aeiou</defaultNavURL>  <enabled>true</enabled>  <id>aeiou</id>  <jsonSetting></jsonSetting>  <module>aeiou</module>  <name>aeiou</name>  <proxy>true</proxy>  <secureJsonFields></secureJsonFields>  <subType>aeiou</subType>  <type>aeiou</type></null>", V1ManagedPluginDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Uninstall one specific plugin", nickname = "uninstallPlugin", notes = "", response = V1EmptyResponse.class, tags={ "Plugin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 500, message = "Bummer, something went wrong") })
    @RequestMapping(value = "/api/v1/manage/plugins/{pluginId}/uninstall",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    default ResponseEntity<V1EmptyResponse> uninstallPlugin(@ApiParam(value = "identifier of the plugin.",required=true) @PathVariable("pluginId") String pluginId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PluginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
