/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.sliew.carp.module.application.vela.api.v1;

import cn.sliew.carp.module.application.vela.api.v1.model.BcodeBcode;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ChartVersionListResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ImageInfo;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListImageRegistryResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1Properties;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-08-01T20:13:23.593+08:00")

@Validated
@Api(value = "Repository", description = "the Repository API")
@RequestMapping(value = "")
public interface RepositoryApi {

    Logger log = LoggerFactory.getLogger(RepositoryApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "get chart value", nickname = "chartValues", notes = "", response = String.class, tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/chart/values",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<String> chartValues(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project,@NotNull @ApiParam(value = "helm chart", required = true) @Valid @RequestParam(value = "chart", required = true) String chart,@NotNull @ApiParam(value = "helm chart version", required = true) @Valid @RequestParam(value = "version", required = true) String version,@NotNull @ApiParam(value = "helm repository url", required = true) @Valid @RequestParam(value = "repoUrl", required = true) String repoUrl,@NotNull @ApiParam(value = "helm repository type", required = true) @Valid @RequestParam(value = "repoType", required = true) String repoType,@ApiParam(value = "secret of the repo") @Valid @RequestParam(value = "secretName", required = false) String secretName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"blank\": true,  \"bytes\": [],  \"empty\": true}", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("aeiou", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get chart value", nickname = "getChartValues", notes = "", response = V1Properties.class, tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1Properties.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/charts/{chart}/versions/{version}/values",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1Properties> getChartValues(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project,@ApiParam(value = "identifier of the helm chart",required=true) @PathVariable("chart") String chart,@ApiParam(value = "version of the helm chart",required=true) @PathVariable("version") String version,@ApiParam(value = "helm repository url") @Valid @RequestParam(value = "repoUrl", required = false) String repoUrl,@ApiParam(value = "secret of the repo") @Valid @RequestParam(value = "secretName", required = false) String secretName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1Properties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1Properties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get the oci repos", nickname = "getImageInfo", notes = "", response = V1ImageInfo.class, tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ImageInfo.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/image/info",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ImageInfo> getImageInfo(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project,@NotNull @ApiParam(value = "the image name", required = true) @Valid @RequestParam(value = "name", required = true) String name,@ApiParam(value = "the secret name of the image repository") @Valid @RequestParam(value = "secretName", required = false) String secretName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ImageInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <message>aeiou</message>  <name>aeiou</name>  <registry>aeiou</registry>  <secretNames>aeiou</secretNames>  <size>123456789</size></null>", V1ImageInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get the oci repos", nickname = "getImageRepos", notes = "", response = V1ListImageRegistryResponse.class, tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListImageRegistryResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/image/repos",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListImageRegistryResponse> getImageRepos(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListImageRegistryResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListImageRegistryResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list versions", nickname = "listChartVersions", notes = "", response = V1ChartVersionListResponse.class, tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ChartVersionListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/charts/{chart}/versions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ChartVersionListResponse> listChartVersions(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project,@ApiParam(value = "identifier of the helm chart",required=true) @PathVariable("chart") String chart,@ApiParam(value = "helm repository url") @Valid @RequestParam(value = "repoUrl", required = false) String repoUrl,@ApiParam(value = "secret of the repo") @Valid @RequestParam(value = "secretName", required = false) String secretName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ChartVersionListResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ChartVersionListResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list charts", nickname = "listCharts", notes = "", response = String.class, responseContainer = "List", tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/charts",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> listCharts(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project,@ApiParam(value = "helm repository url") @Valid @RequestParam(value = "repoUrl", required = false) String repoUrl,@ApiParam(value = "secret of the repo") @Valid @RequestParam(value = "secretName", required = false) String secretName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{}", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("aeiou", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list chart repo", nickname = "listRepo", notes = "", response = String.class, responseContainer = "List", tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/chart_repos",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> listRepo(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{}", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("aeiou", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list versions", nickname = "listVersionsFromQuery", notes = "", response = V1ChartVersionListResponse.class, tags={ "repository","helm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ChartVersionListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/repository/chart/versions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ChartVersionListResponse> listVersionsFromQuery(@NotNull @ApiParam(value = "the config project", required = true) @Valid @RequestParam(value = "project", required = true) String project,@NotNull @ApiParam(value = "helm chart", required = true) @Valid @RequestParam(value = "chart", required = true) String chart,@NotNull @ApiParam(value = "helm repository url", required = true) @Valid @RequestParam(value = "repoUrl", required = true) String repoUrl,@ApiParam(value = "secret of the repo") @Valid @RequestParam(value = "secretName", required = false) String secretName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ChartVersionListResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ChartVersionListResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RepositoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
