/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.sliew.carp.module.application.vela.api.v1;

import cn.sliew.carp.module.application.vela.api.v1.model.BcodeBcode;
import cn.sliew.carp.module.application.vela.api.v1.model.V1AddProjectUserRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1Config;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ConfigTemplateDetail;
import cn.sliew.carp.module.application.vela.api.v1.model.V1CreateConfigDistributionRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1CreateConfigRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1CreateProjectRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1CreateRoleRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1EmptyResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListConfigDistributionResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListConfigResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListConfigTemplateResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListProjectResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListProjectUsersResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListRolesResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListTerraformProviderResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1PermissionBase;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ProjectBase;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ProjectUserBase;
import cn.sliew.carp.module.application.vela.api.v1.model.V1RoleBase;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UpdateConfigRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UpdateProjectRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UpdateProjectUserRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UpdateRoleRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-08-01T20:13:23.593+08:00")

@Validated
@Api(value = "Project", description = "the Project API")
@RequestMapping(value = "")
public interface ProjectApi {

    Logger log = LoggerFactory.getLogger(ProjectApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "apply the distribution job of the config", nickname = "applyDistribution", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/distributions",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1EmptyResponse> applyDistribution(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreateConfigDistributionRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "create a project", nickname = "createProject", notes = "", response = V1ProjectBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ProjectBase.class) })
    @RequestMapping(value = "/api/v1/projects",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1ProjectBase> createProject(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreateProjectRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ProjectBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <description>aeiou</description>  <name>aeiou</name>  <namespace>aeiou</namespace>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1ProjectBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "create a config in a project", nickname = "createProjectConfig", notes = "", response = V1Config.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1Config.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/configs",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1Config> createProjectConfig(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreateConfigRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1Config.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <ArgsEscaped>true</ArgsEscaped>  <AttachStderr>true</AttachStderr>  <AttachStdin>true</AttachStdin>  <AttachStdout>true</AttachStdout>  <Cmd>aeiou</Cmd>  <Domainname>aeiou</Domainname>  <Entrypoint>aeiou</Entrypoint>  <Env>aeiou</Env>  <ExposedPorts></ExposedPorts>  <Hostname>aeiou</Hostname>  <Image>aeiou</Image>  <Labels></Labels>  <MacAddress>aeiou</MacAddress>  <NetworkDisabled>true</NetworkDisabled>  <OnBuild>aeiou</OnBuild>  <OpenStdin>true</OpenStdin>  <Shell>aeiou</Shell>  <StdinOnce>true</StdinOnce>  <StopSignal>aeiou</StopSignal>  <Tty>true</Tty>  <User>aeiou</User>  <Volumes></Volumes>  <WorkingDir>aeiou</WorkingDir></null>", V1Config.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "create a project level perm policy", nickname = "createProjectPermission", notes = "", response = V1PermissionBase.class, responseContainer = "List", tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1PermissionBase.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/projects/{projectName}/permissions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    default ResponseEntity<List<V1PermissionBase>> createProjectPermission(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{}", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <actions>aeiou</actions>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <effect>aeiou</effect>  <name>aeiou</name>  <resources>aeiou</resources>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "create project level role", nickname = "createProjectRole", notes = "", response = V1RoleBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1RoleBase.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/roles",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1RoleBase> createProjectRole(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreateRoleRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <name>aeiou</name>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "add a user to a project", nickname = "createProjectUser", notes = "", response = V1ProjectUserBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ProjectUserBase.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/users",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1ProjectUserBase> createProjectUser(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1AddProjectUserRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ProjectUserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <name>aeiou</name>  <updateTime>2000-01-23T04:56:07.000Z</updateTime>  <userRoles>aeiou</userRoles></null>", V1ProjectUserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a distribution job of the config", nickname = "deleteDistribution", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/distributions/{distributionName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deleteDistribution(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the distribution",required=true) @PathVariable("distributionName") String distributionName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a project", nickname = "deleteProject", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deleteProject(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a config from a project", nickname = "deleteProjectConfig", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/configs/{configName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deleteProjectConfig(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the config",required=true) @PathVariable("configName") String configName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a project level perm policy", nickname = "deleteProjectPermission", notes = "", response = V1PermissionBase.class, responseContainer = "List", tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1PermissionBase.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/projects/{projectName}/permissions/{permissionName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<List<V1PermissionBase>> deleteProjectPermission(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the permission",required=true) @PathVariable("permissionName") String permissionName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{}", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <actions>aeiou</actions>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <effect>aeiou</effect>  <name>aeiou</name>  <resources>aeiou</resources>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete project level role", nickname = "deleteProjectRole", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/roles/{roleName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deleteProjectRole(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the project role",required=true) @PathVariable("roleName") String roleName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a user from a project", nickname = "deleteProjectUser", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/users/{userName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deleteProjectUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateProjectUserRequest body,@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the project user",required=true) @PathVariable("userName") String userName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "detail a config in a project", nickname = "detailConfig", notes = "", response = V1Config.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1Config.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/configs/{configName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.GET)
    default ResponseEntity<V1Config> detailConfig(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the config",required=true) @PathVariable("configName") String configName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateConfigRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1Config.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <ArgsEscaped>true</ArgsEscaped>  <AttachStderr>true</AttachStderr>  <AttachStdin>true</AttachStdin>  <AttachStdout>true</AttachStdout>  <Cmd>aeiou</Cmd>  <Domainname>aeiou</Domainname>  <Entrypoint>aeiou</Entrypoint>  <Env>aeiou</Env>  <ExposedPorts></ExposedPorts>  <Hostname>aeiou</Hostname>  <Image>aeiou</Image>  <Labels></Labels>  <MacAddress>aeiou</MacAddress>  <NetworkDisabled>true</NetworkDisabled>  <OnBuild>aeiou</OnBuild>  <OpenStdin>true</OpenStdin>  <Shell>aeiou</Shell>  <StdinOnce>true</StdinOnce>  <StopSignal>aeiou</StopSignal>  <Tty>true</Tty>  <User>aeiou</User>  <Volumes></Volumes>  <WorkingDir>aeiou</WorkingDir></null>", V1Config.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "detail a project", nickname = "detailProject", notes = "", response = V1ProjectBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ProjectBase.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ProjectBase> detailProject(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ProjectBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <description>aeiou</description>  <name>aeiou</name>  <namespace>aeiou</namespace>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1ProjectBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Detail a template", nickname = "getConfigTemplateByTemplateName", notes = "", response = V1ConfigTemplateDetail.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ConfigTemplateDetail.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/config_templates/{templateName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ConfigTemplateDetail> getConfigTemplateByTemplateName(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the config template",required=true) @PathVariable("templateName") String templateName,@ApiParam(value = "the name of the namespace") @Valid @RequestParam(value = "namespace", required = false) String namespace) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ConfigTemplateDetail.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <description>aeiou</description>  <name>aeiou</name>  <namespace>aeiou</namespace>  <schema>aeiou</schema>  <scope>aeiou</scope>  <sensitive>true</sensitive></null>", V1ConfigTemplateDetail.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get the templates which are in a project", nickname = "getConfigTemplates", notes = "", response = V1ListConfigTemplateResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListConfigTemplateResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/config_templates",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListConfigTemplateResponse> getConfigTemplates(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@NotNull @ApiParam(value = "the namespace of the template", required = true) @Valid @RequestParam(value = "namespace", required = true) String namespace) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListConfigTemplateResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListConfigTemplateResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get configs which are in a project", nickname = "getProjectConfigs", notes = "", response = V1ListConfigResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListConfigResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/configs",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListConfigResponse> getProjectConfigs(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "the template name") @Valid @RequestParam(value = "template", required = false) String template) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListConfigResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListConfigResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get providers which are in a project", nickname = "getProviders", notes = "", response = V1ListTerraformProviderResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListTerraformProviderResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/providers",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListTerraformProviderResponse> getProviders(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListTerraformProviderResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListTerraformProviderResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list the distribution jobs of the config", nickname = "listDistributions", notes = "", response = V1ListConfigDistributionResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListConfigDistributionResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/distributions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListConfigDistributionResponse> listDistributions(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListConfigDistributionResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1ListConfigDistributionResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list all project level perm policies", nickname = "listProjectPermissions", notes = "", response = V1PermissionBase.class, responseContainer = "List", tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1PermissionBase.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/projects/{projectName}/permissions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<List<V1PermissionBase>> listProjectPermissions(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{}", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <actions>aeiou</actions>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <effect>aeiou</effect>  <name>aeiou</name>  <resources>aeiou</resources>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list all project level roles", nickname = "listProjectRoles", notes = "", response = V1ListRolesResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListRolesResponse.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/roles",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListRolesResponse> listProjectRoles(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListRolesResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <total>123456789</total></null>", V1ListRolesResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get targets list belong to a project", nickname = "listProjectTargets", notes = "", response = V1EmptyResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/targets",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1EmptyResponse> listProjectTargets(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list all users belong to a project", nickname = "listProjectUser", notes = "", response = V1ListProjectUsersResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListProjectUsersResponse.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/users",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListProjectUsersResponse> listProjectUser(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListProjectUsersResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <total>123456789</total></null>", V1ListProjectUsersResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list all projects", nickname = "listProjects", notes = "", response = V1ListProjectResponse.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListProjectResponse.class) })
    @RequestMapping(value = "/api/v1/projects",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListProjectResponse> listProjects() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListProjectResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <total>123456789</total></null>", V1ListProjectResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update a project", nickname = "updateProject", notes = "", response = V1ProjectBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ProjectBase.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.PUT)
    default ResponseEntity<V1ProjectBase> updateProject(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateProjectRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ProjectBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <description>aeiou</description>  <name>aeiou</name>  <namespace>aeiou</namespace>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1ProjectBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update a config in a project", nickname = "updateProjectConfig", notes = "", response = V1Config.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1Config.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/configs/{configName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.PUT)
    default ResponseEntity<V1Config> updateProjectConfig(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the config",required=true) @PathVariable("configName") String configName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateConfigRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1Config.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <ArgsEscaped>true</ArgsEscaped>  <AttachStderr>true</AttachStderr>  <AttachStdin>true</AttachStdin>  <AttachStdout>true</AttachStdout>  <Cmd>aeiou</Cmd>  <Domainname>aeiou</Domainname>  <Entrypoint>aeiou</Entrypoint>  <Env>aeiou</Env>  <ExposedPorts></ExposedPorts>  <Hostname>aeiou</Hostname>  <Image>aeiou</Image>  <Labels></Labels>  <MacAddress>aeiou</MacAddress>  <NetworkDisabled>true</NetworkDisabled>  <OnBuild>aeiou</OnBuild>  <OpenStdin>true</OpenStdin>  <Shell>aeiou</Shell>  <StdinOnce>true</StdinOnce>  <StopSignal>aeiou</StopSignal>  <Tty>true</Tty>  <User>aeiou</User>  <Volumes></Volumes>  <WorkingDir>aeiou</WorkingDir></null>", V1Config.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update project level role", nickname = "updateProjectRole", notes = "", response = V1RoleBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1RoleBase.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/roles/{roleName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.PUT)
    default ResponseEntity<V1RoleBase> updateProjectRole(@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the project role",required=true) @PathVariable("roleName") String roleName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateRoleRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <name>aeiou</name>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update a user from a project", nickname = "updateProjectUser", notes = "", response = V1ProjectUserBase.class, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ProjectUserBase.class) })
    @RequestMapping(value = "/api/v1/projects/{projectName}/users/{userName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.PUT)
    default ResponseEntity<V1ProjectUserBase> updateProjectUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateProjectUserRequest body,@ApiParam(value = "identifier of the project",required=true) @PathVariable("projectName") String projectName,@ApiParam(value = "identifier of the project user",required=true) @PathVariable("userName") String userName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ProjectUserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <name>aeiou</name>  <updateTime>2000-01-23T04:56:07.000Z</updateTime>  <userRoles>aeiou</userRoles></null>", V1ProjectUserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProjectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
