/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.sliew.carp.module.application.vela.api.v1;

import cn.sliew.carp.module.application.vela.api.v1.model.BcodeBcode;
import cn.sliew.carp.module.application.vela.api.v1.model.V1CreateUserRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1DetailUserResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1EmptyResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListUserResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UpdateUserRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UserBase;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-08-01T20:13:23.593+08:00")

@Validated
@Api(value = "Users", description = "the Users API")
@RequestMapping(value = "")
public interface UsersApi {

    Logger log = LoggerFactory.getLogger(UsersApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "create a user", nickname = "createUser", notes = "", response = V1UserBase.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1UserBase.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1UserBase> createUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreateUserRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1UserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <disabled>true</disabled>  <email>aeiou</email>  <lastLoginTime>2000-01-23T04:56:07.000Z</lastLoginTime>  <name>aeiou</name></null>", V1UserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a user", nickname = "deleteUser", notes = "", response = V1EmptyResponse.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users/{username}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deleteUser(@ApiParam(value = "identifier of a user",required=true) @PathVariable("username") String username) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "get user detail", nickname = "detailUser", notes = "", response = V1DetailUserResponse.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1DetailUserResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users/{username}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1DetailUserResponse> detailUser(@ApiParam(value = "identifier of a user",required=true) @PathVariable("username") String username) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1DetailUserResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <disabled>true</disabled>  <email>aeiou</email>  <lastLoginTime>2000-01-23T04:56:07.000Z</lastLoginTime>  <name>aeiou</name></null>", V1DetailUserResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "disable a user", nickname = "disableUser", notes = "", response = V1EmptyResponse.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users/{username}/disable",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1EmptyResponse> disableUser(@ApiParam(value = "identifier of a user",required=true) @PathVariable("username") String username) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "enable a user", nickname = "enableUser", notes = "", response = V1EmptyResponse.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users/{username}/enable",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1EmptyResponse> enableUser(@ApiParam(value = "identifier of a user",required=true) @PathVariable("username") String username) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list users", nickname = "listUser", notes = "", response = V1ListUserResponse.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListUserResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListUserResponse> listUser(@ApiParam(value = "query the page number") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "query the page size number") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "fuzzy search based on name") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "fuzzy search based on email") @Valid @RequestParam(value = "email", required = false) String email,@ApiParam(value = "fuzzy search based on alias") @Valid @RequestParam(value = "alias", required = false) String alias) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListUserResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <total>123456789</total></null>", V1ListUserResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update a user's alias or password", nickname = "updateUser", notes = "", response = V1UserBase.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1UserBase.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BcodeBcode.class) })
    @RequestMapping(value = "/api/v1/users/{username}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.PUT)
    default ResponseEntity<V1UserBase> updateUser(@ApiParam(value = "identifier of a user",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateUserRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1UserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <disabled>true</disabled>  <email>aeiou</email>  <lastLoginTime>2000-01-23T04:56:07.000Z</lastLoginTime>  <name>aeiou</name></null>", V1UserBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
