/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.sliew.carp.module.application.vela.api.v1;

import cn.sliew.carp.module.application.vela.api.v1.model.V1CreatePermissionRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1CreateRoleRequest;
import cn.sliew.carp.module.application.vela.api.v1.model.V1EmptyResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1ListRolesResponse;
import cn.sliew.carp.module.application.vela.api.v1.model.V1PermissionBase;
import cn.sliew.carp.module.application.vela.api.v1.model.V1RoleBase;
import cn.sliew.carp.module.application.vela.api.v1.model.V1UpdateRoleRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-08-01T20:13:23.593+08:00")

@Validated
@Api(value = "Rbac", description = "the Rbac API")
@RequestMapping(value = "")
public interface RbacApi {

    Logger log = LoggerFactory.getLogger(RbacApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "create the platform perm policy", nickname = "createPlatformPermission", notes = "", response = V1PermissionBase.class, tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1PermissionBase.class) })
    @RequestMapping(value = "/api/v1/permissions",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1PermissionBase> createPlatformPermission(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreatePermissionRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1PermissionBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <actions>aeiou</actions>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <effect>aeiou</effect>  <name>aeiou</name>  <resources>aeiou</resources>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1PermissionBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "create platform level role", nickname = "createPlatformRole", notes = "", response = V1RoleBase.class, tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1RoleBase.class) })
    @RequestMapping(value = "/api/v1/roles",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.POST)
    default ResponseEntity<V1RoleBase> createPlatformRole(@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1CreateRoleRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <name>aeiou</name>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete a platform perm policy", nickname = "deletePlatformPermission", notes = "", response = V1EmptyResponse.class, tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class) })
    @RequestMapping(value = "/api/v1/permissions/{permissionName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deletePlatformPermission(@ApiParam(value = "identifier of the permission",required=true) @PathVariable("permissionName") String permissionName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update platform level role", nickname = "deletePlatformRole", notes = "", response = V1EmptyResponse.class, tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1EmptyResponse.class) })
    @RequestMapping(value = "/api/v1/roles/{roleName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    default ResponseEntity<V1EmptyResponse> deletePlatformRole(@ApiParam(value = "identifier of the role",required=true) @PathVariable("roleName") String roleName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": true}", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null></null>", V1EmptyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list all platform level perm policies", nickname = "listPlatformPermissions", notes = "", response = V1PermissionBase.class, responseContainer = "List", tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1PermissionBase.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/permissions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<List<V1PermissionBase>> listPlatformPermissions() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{}", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <actions>aeiou</actions>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <effect>aeiou</effect>  <name>aeiou</name>  <resources>aeiou</resources>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "list all platform level roles", nickname = "listPlatformRoles", notes = "", response = V1ListRolesResponse.class, tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1ListRolesResponse.class) })
    @RequestMapping(value = "/api/v1/roles",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    default ResponseEntity<V1ListRolesResponse> listPlatformRoles() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1ListRolesResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <total>123456789</total></null>", V1ListRolesResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "update platform level role", nickname = "updatePlatformRole", notes = "", response = V1RoleBase.class, tags={ "rbac", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = V1RoleBase.class) })
    @RequestMapping(value = "/api/v1/roles/{roleName}",
        produces = "application/json", 
        consumes = "application/xml",
        method = RequestMethod.PUT)
    default ResponseEntity<V1RoleBase> updatePlatformRole(@ApiParam(value = "identifier of the role",required=true) @PathVariable("roleName") String roleName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody V1UpdateRoleRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<null>  <alias>aeiou</alias>  <createTime>2000-01-23T04:56:07.000Z</createTime>  <name>aeiou</name>  <updateTime>2000-01-23T04:56:07.000Z</updateTime></null>", V1RoleBase.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RbacApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
