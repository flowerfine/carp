<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.sliew.carp.framework.mybatis.mapper.master.security.SecUserMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.sliew.carp.framework.mybatis.entity.master.security.SecUser">
        <result column="id" property="id"/>
        <result column="creator" property="creator"/>
        <result column="create_time" property="createTime"/>
        <result column="editor" property="editor"/>
        <result column="update_time" property="updateTime"/>
        <result column="type" property="type"/>
        <result column="user_name" property="userName"/>
        <result column="nick_name" property="nickName"/>
        <result column="avatar" property="avatar"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="password" property="password"/>
        <result column="gender" property="gender"/>
        <result column="address" property="address"/>
        <result column="summary" property="summary"/>
        <result column="order" property="order"/>
        <result column="status" property="status"/>
        <result column="remark" property="remark"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, creator, create_time, editor, update_time,
        `type`, user_name, nick_name, avatar, email, phone,
        `password`, gender, address, summary, `order`,
        `status`, remark
    </sql>

    <select id="selectPage" resultMap="BaseResultMap">
        select t.*
        from sec_user t
        <where>
            <if test="user.userName != null and user.userName != ''">
                and t.user_name like concat('%',#{user.userName},'%')
            </if>
            <if test="user.nickName != null and user.nickName != ''">
                and t.nick_name like concat('%',#{user.nickName},'%')
            </if>
            <if test="user.email != null and user.email != ''">
                and t.email like concat('%',#{user.email},'%')
            </if>
            <if test="user.status != null and user.status != ''">
                and t.status = #{user.status}
            </if>
            <choose>
                <when test="roleId != null and roleId != '' ">
                    and exists (select 1 from sec_user_role ur where t.id = ur.user_id
                    and ur.role_id = #{roleId} )
                </when>
                <when test="deptId != null and deptId != '' ">
                    and exists (select 1 from sec_user_dept ud where t.id = ud.user_id
                    and ud.dept_id = #{deptId} )
                </when>
            </choose>
        </where>
    </select>


    <select id="selectByRoleOrDept" resultMap="BaseResultMap">
        select t.*
        from sec_user t
        <where>
            <choose>
                <when test="roleId != null and roleId != '' and direction == '0'.toString() ">
                    and not exists (select 1 from sec_user_role ur where t.id = ur.user_id
                    and ur.role_id = #{roleId} )
                </when>
                <when test="roleId != null and roleId != '' and direction == '1'.toString() ">
                    and exists (select 1 from sec_user_role ur where t.id = ur.user_id
                    and ur.role_id = #{roleId} )
                </when>
                <when test="deptId != null and deptId != '' and direction == '0'.toString() ">
                    and not exists (select 1 from sec_user_dept ud where t.id = ud.user_id
                    and ud.dept_id = #{deptId} )
                </when>
                <when test="deptId != null and deptId != '' and direction == '1'.toString() ">
                    and exists (select 1 from sec_user_dept ud where t.id = ud.user_id
                    and ud.dept_id = #{deptId} )
                </when>
            </choose>
            <if test="userName != null and userName != '' ">
                and t.user_name like concat('%',#{userName},'%')
            </if>
        </where>
        limit 200
    </select>

    <select id="selectAllPrivilege"
            resultMap="cn.sliew.carp.framework.mybatis.mapper.master.security.SecRoleMapper.RoleWithPrivilegeMap">
        <![CDATA[
         select distinct
                role.role_id as id,
                role.`code`,
                p.privilege_code,
                p.privilege_name,
                p.resource_path,
                p.resource_type
           from (select t.id,
                        ar.role_id,
                        r.`code`
                   from sec_user t
                   join sec_user_role ar on t.id = ar.user_id
                   join sec_role r on ar.role_id = r.id
                  where t.user_name = #{userName}
                    and ar.role_id is not null
                  union
                 select t.id,
                        dr.role_id,
                        r.`code`
                   from sec_user t
                   join sec_user_dept ad on t.id = ad.user_id
                   join sec_dept_role dr on ad.dept_id = dr.dept_id
                   join sec_role r on dr.role_id = r.id
                  where t.user_name = #{userName}
                    and dr.role_id is not null) role
           left join(select rp.role_id,
			                rp.privilege_id,
			                p.privilege_code,
			                p.privilege_name,
			                p.resource_path,
			                p.resource_type
			           from sec_role_privilege rp
		               join sec_privilege p on rp.privilege_id = p.id
		               ) p
             on p.role_id = role.role_id
        ]]>
    </select>
</mapper>
