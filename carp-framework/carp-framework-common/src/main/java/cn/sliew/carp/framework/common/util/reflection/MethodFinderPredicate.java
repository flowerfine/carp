/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cn.sliew.carp.framework.common.util.reflection;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.function.Predicate;

public class MethodFinderPredicate implements Predicate<Method> {

    private final String methodName;
    private final Class<?>[] parameterTypes;

    public MethodFinderPredicate(String methodName, Class<?>... parameterTypes) {
        this.methodName = methodName;
        this.parameterTypes = parameterTypes;
    }

    @Override
    public boolean test(Method method) {
        if(method.isBridge()) return false; // method generated by compiler with same signature.

        return methodName.equals(method.getName()) && (
                Arrays.equals(method.getParameterTypes(), parameterTypes)
                        || compareParameterTypesForPrimitives(method.getParameterTypes()));
    }

    private boolean compareParameterTypesForPrimitives(Class<?>[] parameterTypes) {
        if (this.parameterTypes.length != parameterTypes.length) return false;

        boolean result = true;
        for (int i = 0; i < parameterTypes.length; i++) {
            result &= ReflectionUtils.isClassAssignable(parameterTypes[i], this.parameterTypes[i]);
        }
        return result;
    }
}
