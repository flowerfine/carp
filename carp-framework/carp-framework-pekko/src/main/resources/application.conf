pekko {

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = on

  actor {
    default-dispatcher {
      # Must be one of the following
      # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
      # MessageDispatcherConfigurator with a public constructor with
      # both com.typesafe.config.Config parameter and
      # org.apache.pekko.dispatch.DispatcherPrerequisites parameters.
      # PinnedDispatcher must be used together with executor=thread-pool-executor.
      type = "Dispatcher"

      # Which kind of ExecutorService to use for this dispatcher
      # Valid options:
      #  - "default-executor" requires a "default-executor" section
      #  - "fork-join-executor" requires a "fork-join-executor" section
      #  - "virtual-thread-executor" requires a "virtual-thread-executor" section
      #  - "thread-pool-executor" requires a "thread-pool-executor" section
      #  - "affinity-pool-executor" requires an "affinity-pool-executor" section
      #  - A FQCN of a class extending ExecutorServiceConfigurator
      executor = "default-executor"

      # This will be used if you have set "executor = "default-executor"".
      # If an ActorSystem is created with a given ExecutionContext, this
      # ExecutionContext will be used as the default executor for all
      # dispatchers in the ActorSystem configured with
      # executor = "default-executor". Note that "default-executor"
      # is the default value for executor, and therefore used if not
      # specified otherwise. If no ExecutionContext is given,
      # the executor configured in "fallback" will be used.
      default-executor {
        fallback = "fork-join-executor"
      }

      # This will be used if you have set "executor = "fork-join-executor""
      # Underlying thread pool implementation is java.util.concurrent.ForkJoinPool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 1.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"

        # This config is new in Pekko v1.1.0 and only has an effect if you are running with JDK 9 and above.
        # Read the documentation on `java.util.concurrent.ForkJoinPool` to find out more. Default in hex is 0x7fff.
        maximum-pool-size = 32767
      }

      # This will be used if you have set "executor = "virtual-thread-executor"
      # This executor will execute the every task on a new virtual thread.
      # Underlying thread pool implementation is java.util.concurrent.ForkJoinPool for JDK <= 22
      # If the current runtime does not support virtual thread,
      # then the executor configured in "fallback" will be used.
      virtual-thread-executor {
        #Please set the the underlying pool with system properties below:
        #jdk.virtualThreadScheduler.parallelism
        #jdk.virtualThreadScheduler.maxPoolSize
        #jdk.virtualThreadScheduler.minRunnable
        #jdk.unparker.maxPoolSize
        fallback = "fork-join-executor"
      }
    }

    http-job-dispatcher {
          type = "Dispatcher"
          executor = "default-executor"
          default-executor {
            fallback = "fork-join-executor"
          }
          fork-join-executor {
            parallelism-min = 8
            parallelism-factor = 1.0
            parallelism-max = 64
          }
        }


  }

  io {
    # By default the select loops run on dedicated threads, hence using a
    # PinnedDispatcher
    pinned-dispatcher {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-timeout = off
    }
  }

}